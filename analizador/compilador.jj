PARSER_BEGIN(compilador)
import java.io.*;
import java.util.*;
import java.util.ArrayList;
import java.util.List;


class compilador
{
	



	public static void main( String[] args )throws ParseException, Exception
	{
		try
		{		
     		compilador analizador = new compilador( System.in ) ;
			analizador.Programa();
			System.out.println("\tFinalizado con exito.");
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("\tError.");
		}

	}	
}
PARSER_END(compilador)

TOKEN: {<PRINT: "print">{System.out.println("Imprime ");}}//1
TOKEN:{<TIPO_METODO: "static" | "abstract" | "virtual">{System.out.println("Metodo  ->"+image);}}//2
TOKEN: {<MAIN: "public static void main()">{System.out.println("Metodo principal");}} //3
TOKEN: {<VOID: "void">{System.out.println("Retorno de un metodo");}} //4
TOKEN:{ <EXCEPCIONES: "throw" | "throws"  | "raise">{System.out.println("Lanzar excepcion->"+image);}} //5
TOKEN: {<TRY: "try">{System.out.println("Excepcion try");}}//6
TOKEN: {<MANDA_EXCEPCION: "catch" >{System.out.println("Excepcion de errores try ->" + image);}}//7
TOKEN: {<DEFINE_CLASES: "class">{System.out.println("Define clase -> " + image);}} //8
//TOKEN:{<Tipo_Dato:"int" |"decimal"|"char"|"string"|"bool"|"float">{System.out.println("Tipo de dato->"+image);}}//8
TOKEN:{<TIPO_DATO:"int" | "decimal"| "char"| "string"| "bool"|"float">{System.out.println("Tipo de dato->"+image);}}//9
TOKEN:
{
		<PARIZQ: "(">//10
		| <CORIZQ: "[" >//11
		| <LLAVEIZQ: "{"> //12
		| <PARDER: ")"> //13
		| <CORDER:"]"> //14
		| <LLAVEDER:"}">{System.out.println("BLOQUE->"+image);}//15
}
TOKEN:
{
	<COMA: "," >//16
	| <PUNTO: "." > //17
	| <PUNTOYCOMA: ";" >//18
	|<COMILLADOBLE: "\"" > {System.out.println("SIGNO ->"+image);}  //19
	|<DOSPUNTOS: ":">//20
}
TOKEN:{ <FUNCION: "def" | "lambda " | "pred">{System.out.println("Define funcion ->"+image);}}//21
TOKEN:{ <MODIFICADOR_ACCESO: "public" | "private" | "protected">{System.out.println("Modificador ->"+image);}}//22
//Operador aritmetico
TOKEN : {<ASIGNACION:"=">//23
| <MAS:"+"> //24
| <MENOS: "-">//25
| <MULT: "*"> //26
|<DIV: "/">{System.out.println("OP_ARITMETICO ->"+image);}} //27
TOKEN:{<OP_REL: "<"|"<="|">"|">="|"=="|"!=">{System.out.println("OP_RELACIONAL ->"+image);}} //28
TOKEN:{ <OP_LOG: "and"|"or"|"not"|"&&"|"||"|"!">{System.out.println("OP_Logicos ->"+image);}} //29
TOKEN: {<EXTENDS: "extends" | "base" | "this" | "implements">{System.out.println("Hereda ->"+image);}} //30
TOKEN: {<ENDIF: "endif">{System.out.println("Fin if");}} //31
TOKEN: {<ENDCICLO: "endwhile" | "endforeach">{System.out.println("Fin ciclo->"+image);}} //32
//Ciclos
TOKEN:{
<CICLOWHILE: "while">//33
| <FOR: "for"> //34
| <FOREACH: "foreach">//35
| <DO: "do">//36
}
TOKEN:{ <REPETIR: "retry" | "repeat">{System.out.println("Repite ->"+image);}} //37
TOKEN: {<OBJECTOS: "object" | "self">{System.out.println("Objeto "+ image);}} //38
TOKEN: {<EVENT: "event">{System.out.println("Evento");}} //39
TOKEN: {<BEGIN: "begin">{System.out.println("Empieza ");}} //40
TOKEN: {<AS: "as">{System.out.println("Convierte tipo");}} //41
TOKEN:{ <INTERRUPTOR:"break" | "continue">{System.out.println("Interruptor ->"+image);}}  //42
TOKEN:{<SWITCH:"switch" >//43
| <IF: "if">{System.out.println("Pregunta ->"+image);}} //44
//Depende pregunta
TOKEN:{<ELSE: "else">//45
| <ELIF: "elif">{System.out.println("Intruccion "+ image);}} //46
TOKEN:{<CHECKED:"checked" | "unchecked" >{System.out.println("Comprueba ->"+image);}} //47
TOKEN:{<CONST:"const">{System.out.println("Declara constante");}} //48
TOKEN:{<PORDEFECTO:"default">{System.out.println("Por defecto");}} //49
TOKEN:{<RETORNA_VALOR:"delegate" | "return" | "yield">{System.out.println("Devuelve valor ->"+ image);}} //50
TOKEN:{ <ASYNC: "async">{System.out.println("Funcion asincrona");}} // 51
TOKEN:{ <ASSERT: "assert">{System.out.println("Evalua si devuelve true");}} //52
TOKEN:{ <DEL: "del">{System.out.println("Elimina referencia");}} //53
TOKEN:{ <EXEC: "exec">{System.out.println("Cadena o archivo");}} //54
TOKEN:{ <CALIFICADOR: "global" | "local" | "nonlocal">{System.out.println("Calificador de ambito ->"+image);}} //55
TOKEN:{ <LIBRERIAS: "import" | "export">{System.out.println("Clase ->"+image);}} // 56
TOKEN:{ <IN: "in">{System.out.println("Existencia de valor");}} // 57
TOKEN:{ <IS: "is">{System.out.println("Objetos iguales");}} // 58
TOKEN:{ <NONE: "none">{System.out.println("Nada ");}} // 59
TOKEN:{ <PASS: "pass">{System.out.println("Rellena espacios ");}} // 60
TOKEN:{<INC_DEC:"++" | "--">{System.out.println("Incremento o decremento->"+image);}} //61
TOKEN:{ <BOOLEAN: "true" | "false">{System.out.println("BOOLEANO ->"+image);}} // 62
TOKEN:{ <INSTANCEOF: "instanceof">{System.out.println("Instancia");}} // 63
TOKEN:{ <ISSET: "isset">{System.out.println("Variable definida");}} // 64
TOKEN:{ <CLONE: "clone">{System.out.println("Clonar");}} // 65
TOKEN:{ <GOTO: "goto">{System.out.println("Salto");}} // 66
TOKEN:{ <TRAIT: "trait">{System.out.println("Rasgos");}} // 67
TOKEN:{ <EVALUA: "include" | "require" | "eval" | "rescue" | "ensure">{System.out.println("EVALUA ->"+image);}} //68
TOKEN:{<TERMINA: "die" | "exit">{System.out.println("TERMINA ->"+image);}}  //69
TOKEN:{ <EMPY: "empy">{System.out.println("Vacio");}} // 70
TOKEN:{ <ECHO: "echo">{System.out.println("Muestra cadena ");}} // 71
TOKEN:{ <UNSET: "unset">{System.out.println("Destruye Variable");}} // 72
TOKEN:{ <MODULE: "module">{System.out.println("Declara modulo ");}} //73
TOKEN:{ <NIL: "nil">{System.out.println("Invalido ");}} //74
TOKEN:{ <EJECUTA_FALSE: "until" | "unless">{System.out.println("Ejecuta mientras es =false ->" + image);}} //75
TOKEN:{ <CALLABLE: "callable">{System.out.println("Devolución de llamada ");}} //76
TOKEN:{ <TRANSIENT: "transient">{System.out.println("Demarcar");}} //77
TOKEN:{ <NULL: "null">{System.out.println("Sin objeto");}} //78
TOKEN:{<OPEN:"open" | "opens">{System.out.println("ABRIR ->"+image);}} //79
TOKEN:{ <SYNCHRONIZED: "synchronized">{System.out.println("Sincronizacion");}} //80
TOKEN:{ <TYPEDEF: "typedef">{System.out.println("Asigna nombre alternativo ");}} //81
TOKEN:{ <PACKAGE: "package">{System.out.println("Paquete_Programas ");}} //82
TOKEN:{ <STRICTFP: "strictfp">{System.out.println("Restringe ");}} //83
TOKEN:{ <VOLATILE: "volatile">{System.out.println("Marcador_Variable");}} //84
TOKEN:{ <DEFER: "defer">{System.out.println("Ejecuta_sentencia");}} //85
TOKEN:{ <MAP: "map">{System.out.println("Aplica_Func");}} //86
TOKEN:{ <REDO: "redo">{System.out.println("Salto loop ");}} //87
TOKEN:{ <ALIAS: "alias">{System.out.println("Crea alias ");}} //88
TOKEN:{ <CLAUSULA: "when" | "from">{System.out.println("Clausula ->"+image);}} //89
TOKEN:{<MAYUSCULA:"upper"> //90
|<MINUSCULA: "lower">{System.out.println("USO MINUSCULA y MAYUSCULA ->"+image);}} //91
TOKEN:{ <OPERADOR: "new" >{System.out.println("Operador ->"+image);}} //92
TOKEN:{ <TYPEOF: "typeof">{System.out.println("Tipo");}} //93
TOKEN:{ <SIZEOF: "sizeof">{System.out.println("Tamaño ");}} //94
TOKEN:{<EXP_IMP:"explicit"|"implicit">{System.out.println("Conversiones ->"+image);}} //95
TOKEN:{<CONTENEDOR_ELEMENTO: "array" | "list">{System.out.println("ARREGLO");}}//96
TOKEN:{ <STACKALLOC: "stackalloc">{System.out.println("Contenedores");}} //97
TOKEN:{<SET:"set">//98
|<GET: "get"> {System.out.println("Encapsulamiento ->"+image);}} //99
TOKEN:{ <VALUE: "value" | "ByValue">{System.out.println("Valor ->" + image);}} //100
TOKEN:{ <RANGE: "range">{System.out.println("Aleatorio");}} //101
TOKEN:{ <UNDEF: "undef">{System.out.println("Metodo indefinido");}} //102
TOKEN:{<MOD:"extern"|"intern"|"sealed" | "native" | "final" | "fallthrough" | "out" | "unsafe">{System.out.println("Modificador ->"+image);}} //103
TOKEN:{ <PARAMS: "params">{System.out.println("Parametros");}} //104
TOKEN:{ <ONE_WAY: "one_way">{System.out.println("Unidireccional");}} //105
TOKEN:{ <NAMESPACE: "namespace">{System.out.println("Bloque namespace");}} //106
TOKEN:{ <REF: "ref">{System.out.println("Referencia");}} //107
TOKEN:{ <MAXINT: "maxint">{System.out.println("Valor maximo");}} //108
TOKEN:{ <USES: "uses">{System.out.println("Declarar unidades");}} //109
TOKEN:{ <THREAD_safe: "thread safe">{System.out.println("Seguridad de hilos");}} //110
TOKEN:{ <ENUM: "enum">{System.out.println("Enumeracion");}} //111
TOKEN:{ <ODD: "odd">{System.out.println("Devuelve verdadero o falso");}} //112
TOKEN:{ <FIXED: "fixed">{System.out.println("Sentencia fija");}} //113
TOKEN:{ <STRUCT: "struct">{System.out.println("Estructura ");}} //114
TOKEN:{ <USING: "using">{System.out.println("Declaracion");}} //115
TOKEN:{ <OVERRIDE: "override">{System.out.println("Anular");}} //116
TOKEN:{ <READONLY: "readonly">{System.out.println("Solo leer");}} //117
TOKEN:{ <LOCK_UNLOCK: "lock" | "unlock">{System.out.println("Bloqueo->"+image);}} //118
TOKEN:{ <ASM: "asm">{System.out.println("Invocador ensamblador");}} //119
TOKEN:{ <NEWTYPE: "newtype">{System.out.println("Crear nuevo tipo");}} //120
TOKEN:{ <BITLAND: "bitland">{System.out.println("Funcion devolver");}} //121
TOKEN:{ <OUTER: "outer">{System.out.println("Externo");}} //122
TOKEN:{ <FUTURE: "future">{System.out.println("Resultado calculo");}} //123
TOKEN:{ <REST: "rest">{System.out.println("Numero indefinido");}} //124
TOKEN:{ <DEBUGGER: "debugger">{System.out.println("Depurador");}} //125
TOKEN:{ <TRANSITIVE: "transitive">{System.out.println("Transitivo");}} //126
TOKEN:{ <ACCEDE_CLASE_PADRE: "super">{System.out.println("Clase padre");}} //127
TOKEN:{ <CASE: "case">{System.out.println("case");}} //128
TOKEN:{ <FIN: "end">{System.out.println("end");}} //129
TOKEN:{ <PROGRAMA: "program">{System.out.println("end");}} //130
TOKEN:{<SISTEMA:"system">{System.out.println("system");}}//131
TOKEN:{<LIMPIAR:"clear">{System.out.println("clear");}}//132
TOKEN:{<FUNCMATEMATICA:"PI" | "E" | "Abs" | "Exp" | "DivRem" | "Log" | "Max" | "Min" | "Sqrt" | "Sin" | "Cos" | "Tan" | "Pow">{System.out.println("Funcion_Matematica->"+image);}}//133
TOKEN:{<MATEMATICA: "math">{System.out.println("math");}}//134
TOKEN:{<ENTRADA: "input">{System.out.println("entrada");}}//135
TOKEN:{<USO_LIBRERIA:"Matplotlib" | "TensorFlow" | "Keras" | "Numpy" | "Math" | "Pandas" >{System.out.println("importa libreria ->"+image);}}//136
TOKEN:{<READ: "read">{System.out.println("leer");}}//137
TOKEN:{<CONVERTIR: "convert">{System.out.println("convertir");}}//137
TOKEN :
{
	<IDENTIFIER: <LETRA>(<LETRA> | <NUMEROS> | "_")* >{System.out.println("identificador -> "+image);} //138
	|<NUMEROS: (["0"-"9"])+>//139
	|<NUMEROS_DECIMALES:(["0"-"9"])+["."](["0"-"9"])+>//140
	| <#LETRA: (["a"-"z","A"-"Z"])>//141
	| <CADENA: (<COMILLADOBLE>(<LETRA> | <NUMEROS> | "_" | " ")*<COMILLADOBLE>)>//142
	| <CARAC : "'"["a"-"z","A"-"Z","0"-"9"]"'" >{System.out.println("caracter ->"+image);}//143
}  


SKIP:

{
  " "
| "\r"
| "\t"
| "\n"
| "\r\n"
| "//"
| "/*"
| "*/"
}
//1. namespace
void Programa():
{ }
{	
	(librerias())* <NAMESPACE><IDENTIFIER><DOSPUNTOS>programaPrincipal()<FIN>
	<EOF>		
}
//2. librerias
void librerias():
{ }
{
	(<LIBRERIAS><USO_LIBRERIA>(<PUNTO><USO_LIBRERIA>)*)
}
//3.Programa principal (class program)
void programaPrincipal():
{ }
{
	
	(<PROGRAMA><DEFINE_CLASES><DOSPUNTOS>(declaracionVariable())* metodoPrincipal()<FIN>)?
	(defineClase()| herencia())*
}
//4. Metodo main
void metodoPrincipal():
{ }
{
	(<MAIN><DOSPUNTOS>bloqueCodigoMetodo()<FIN>)? (defineMetodos() | defineFuncion())*
}
void bloqueCodigoMetodo():
{ }
{
	(
		
		imprime()  
		| declaracionVariable()
		| ciclos()  
		| excepciones() 
		| preguntaIf()
		| objeto()
		|thiss()
		| llamadaMetodo()
		| sett()
		| gett()
		| salir()
		| limpiar()
		| operacionMatematica()
		| contieneElementos()
		| rango()
		| matriz()
		| preguntaSwitch()
		| leer()
		|numeroBytes()
		| tipoOperador()
		| convertir()
		| may_min()
		
	)*
}
//5. Declaración de variables
void declaracionVariable():
{ }
{
	<TIPO_DATO><IDENTIFIER><ASIGNACION>valor() 
}
void valor():
{ }
{
	<IDENTIFIER> | <NUMEROS> | <CADENA> | <CARAC> | <NUMEROS_DECIMALES>
}

//6. Pregunta IF
void preguntaIf():
{ }
{
	<IF> condicion() <DOSPUNTOS>bloqueCodigo() <FIN> sinoSi() sino()
}
void sinoSi():
{ }
{
	(<ELIF>condicion()<DOSPUNTOS>bloqueCodigo()<FIN>)*
}
void sino():
{ }
{
	(<ELSE><DOSPUNTOS>bloqueCodigo()<FIN>)?
}
void condicion():
{ }
{
	valor()<OP_REL>valor()(<OP_LOG>valor()<OP_REL>valor())*
}
//7. Imprimir
void imprime():
{ }
{
	<PRINT><PARIZQ>imprimeValor()<PARDER>
}
void imprimeValor():
{ }
{
	(valor()(<MAS>valor())*)
}
// 8. Switch case
void preguntaSwitch():
{ }
{
	<SWITCH><PARIZQ><IDENTIFIER><PARDER><DOSPUNTOS>casos() porDefecto()<FIN>
}
void casos():
{ }
{
	(<CASE>valor()<DOSPUNTOS>bloqueCodigo()<INTERRUPTOR><FIN>)+
}
void porDefecto():
{ }
{
	(<PORDEFECTO><DOSPUNTOS>bloqueCodigo()<FIN>)?
}
//9. ciclos
void ciclos():
{ }
{
	(cicloWhile() | cicloFor() | cicloDo())
}
void cicloWhile():
{ }
{
	<CICLOWHILE> condicion()<DOSPUNTOS>bloqueCodigo()<FIN>
}
void cicloFor():
{ }
{
	<FOR>inicializador()<ASIGNACION><NUMEROS><PUNTOYCOMA> condicion()<PUNTOYCOMA><IDENTIFIER><INC_DEC><DOSPUNTOS>bloqueCodigo()<FIN>
}
void inicializador():
{ }
{
	<TIPO_DATO><IDENTIFIER> | <IDENTIFIER>
}
void cicloDo():
{ }
{
	<DO><DOSPUNTOS>bloqueCodigo()<FIN><PARIZQ><CICLOWHILE>condicion()<PARDER>
}
void bloqueCodigo():
{ }
{
	(declaracionVariable() 
	| ciclos() 
	| imprime() 
	| preguntaIf()
	| contieneElementos()
	| operacionMatematica()
	| excepciones()
	| salir()
	| limpiar()
	| rango()
	| matriz()
	| inc_dec()
	| convertir()
	| may_min()
	)*
}
//10. Funcion
void defineFuncion():
{ }
{
	<FUNCION><PARIZQ>defineParametros()<PARDER><IDENTIFIER><DOSPUNTOS>bloqueCodigoMetodo()<FIN>
}
void defineParametros():
{ }
{
	(defineParametro()(<COMA>defineParametro())*)*
}
void defineParametro():
{ }
{
	(<TIPO_DATO>)?<IDENTIFIER>
}
//11. Excepcion try-catch
void excepciones():
{ }
{
	<TRY><DOSPUNTOS>bloqueCodigo()<FIN><MANDA_EXCEPCION><PARIZQ><PARDER><DOSPUNTOS>imprime()<FIN>
}
//12. Define clase
void defineClase():
{ }
{
	<IDENTIFIER><MODIFICADOR_ACCESO><DEFINE_CLASES><DOSPUNTOS>bloqueCodigoClase()<FIN>
}
void bloqueCodigoClase():
{ }
{
	(defineFuncion() | defineMetodos() | sett() | gett() | contieneElementos() | declaracionVariable() | matriz())*
}
//13. Objeto
void objeto():
{ }	
{
	<OBJECTOS><IDENTIFIER><ASIGNACION><OPERADOR><OBJECTOS><PARIZQ><PARDER>
}
// 14. contiene elentos (listas y arreglos)
void contieneElementos():
{

}
{
	lista() | arreglo() 
}
void lista():
{ }
{
	<LLAVEIZQ>elementosContenidos()<LLAVEDER><ASIGNACION>inicializador()
}
void elementoContenido():
{ }
{
	<CADENA> | <NUMEROS>
}
void elementosContenidos():
{ }
{
	elementoContenido()(<COMA>elementoContenido())*
}
void arreglo():
{ }
{
	<PARIZQ>elementosContenidos()<PARDER><ASIGNACION>inicializador()<CORIZQ><NUMEROS><CORDER>
}
//15. retorn
void retorno():
{ }
{
	<RETORNA_VALOR><IDENTIFIER>
}
//16. leer
void leer():
{ }
{
	<READ><PUNTO><OPERADOR><READ><PARIZQ><PARDER>
}
//17. rango
void rango():
{ }
{
	<RANGE><PARIZQ>dentroRango()<PARDER>
}
void dentroRango():
{ }
{
	<NUMEROS><COMA><NUMEROS>
}
//18. size of
void numeroBytes():
{ }
{
	<SIZEOF><PARIZQ>(<TIPO_DATO>|<IDENTIFIER>)<PARDER>
}
//19. type of
void tipoOperador():
{ }
{
	<TYPEOF><IDENTIFIER>
}
//20. this
void thiss():
{}
{
	<EXTENDS><PUNTO><IDENTIFIER><ASIGNACION><IDENTIFIER>
}
// 21. exit
void salir():
{}
{
	<TERMINA><PARIZQ><PARDER>
}
// 22. llama metodo
void llamadaMetodo():
{}
{
	<IDENTIFIER><PARIZQ>defineParametros()<PARDER>
}
//23. herencia
void herencia():
{ }
{
	<DOSPUNTOS><IDENTIFIER><DOSPUNTOS><IDENTIFIER><DEFINE_CLASES><DOSPUNTOS>bloqueCodigoClase()<FIN>
}
//24. set
void sett():
{}
{
	<SET> <DOSPUNTOS> <IDENTIFIER> <ASIGNACION> valor() <FIN>
}
//25. get
void gett():
{}
{
	<GET> <DOSPUNTOS> retorno() <FIN>
}
//26. matrices
void matriz():
{}
{
	<CORIZQ><NUMEROS><COMA><NUMEROS><CORDER>inicializador()<ASIGNACION><OPERADOR><TIPO_DATO><CORIZQ>elementosMatriz()<CORDER>
}
void elementosMatriz():
{}
{
	<LLAVEIZQ>elementosContenidos()<LLAVEDER>(<COMA><LLAVEIZQ>elementosContenidos()<LLAVEDER>)*
}
//27. limpiar
void limpiar():
{}
{
	<SISTEMA><PUNTO><LIMPIAR>
}
//28. math
void operacionMatematica():
{}
{
	<MATEMATICA><PUNTO><FUNCMATEMATICA><PARIZQ>valorOperacion()<PARDER> 
}
void valorOperacion():
{}
{
	valorOper()(<COMA>valorOper())*
}
void valorOper():
{}
{
	<IDENTIFIER>|<NUMEROS>
}

//30. definir metodos
void defineMetodos():
{ }
{
	
	(metodoRetorno() | metodoSinRetorno())
}
void metodoRetorno():
{ }
{
	<MODIFICADOR_ACCESO><TIPO_DATO><IDENTIFIER><PARIZQ>defineParametros()<PARDER><DOSPUNTOS>bloqueCodigoMetodo()retorno()<FIN>
}
void metodoSinRetorno():
{ }
{
	
	<VOID><IDENTIFIER><PARIZQ>defineParametros()<PARDER><DOSPUNTOS>bloqueCodigoMetodo()<FIN>
}
void inc_dec():
{ }
{
	<IDENTIFIER><INC_DEC>
}
//31. Convierte
void convertir():
{ }
{
	<CONVERTIR><PARIZQ><TIPO_DATO><PARIZQ><IDENTIFIER><PARDER><PARDER><ASIGNACION>(<TIPO_DATO>)?<IDENTIFIER>
}
//32. mayuscula y MINUSCULA
void may_min():
{ }
{
	convMinuscula() | convMayuscula()
	
}
void convMinuscula():
{ }
{
	<MINUSCULA><PUNTO><IDENTIFIER>(<ASIGNACION>(<TIPO_DATO>)?<IDENTIFIER>)?
}
void convMayuscula():
{ }
{
	<MAYUSCULA><PUNTO><IDENTIFIER>(<ASIGNACION>(<TIPO_DATO>)?<IDENTIFIER>)?
}













	



	